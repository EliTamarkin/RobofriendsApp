{"version":3,"sources":["serviceWorker.js","components/SearchBox.jsx","components/Card.jsx","components/CardList.jsx","components/Scroll.jsx","components/ErrorBoundry.jsx","containers/App.jsx","actions.js","constants.js","reducers.js","index.jsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","SearchBox","props","aria-label","type","name","placeholder","onChange","barChange","className","Card","src","id","alt","email","CardList","cardsArray","robots","map","robot","index","key","Scroll","style","overflowY","border","height","children","ErrorBoundry","info","this","setState","React","Component","App","onRobotsRequest","searchField","isPending","onSearchChange","matchingRobots","filter","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","response","json","data","intialStateSearch","intialStateRobots","rootReducer","combineReducers","action","Object","assign","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b0a6f1ad.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\n\r\n\r\nconst SearchBox = (props) => {\r\nreturn (\r\n    <div>\r\n        <input aria-label=\"search-robots\" type=\"text\" name=\"searchfield\" placeholder=\"search robots\" onChange = {props.barChange} className=\"pa3 ba b--green bg-lightest-blue\" />\r\n    </div>\r\n)\r\n};\r\n\r\n\r\nexport default SearchBox;","import React from \"react\";\r\n\r\n\r\n\r\nconst Card = (props) => {\r\n    return (\r\n        <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img src={`https://robohash.org/${props.id}?size=200x200`} alt=\"robots\"></img>\r\n            <div>\r\n                <h2>{props.name}</h2>\r\n                <p>{props.email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Card;","import React from \"react\";\r\nimport Card from './Card.jsx';\r\n\r\n\r\nconst CardList = ({robots}) => {\r\n    const cardsArray  = robots.map((robot,index) => {\r\n        return <Card key={index} id={robot.id} name={robot.name} email = {robot.email}  />\r\n    })\r\n    return (\r\n        <div>\r\n            {cardsArray}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default CardList;","import React from \"react\";\r\n\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: \"scroll\", border: \"3px solid black\", height: \"800px\"}}>\r\n            {props.children}\r\n        </div>\r\n\r\n    )\r\n};\r\n\r\n\r\nexport default Scroll;","import React from \"react\";\r\n\r\n\r\nclass ErrorBoundry extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            error: false\r\n        }\r\n    }\r\n    componentDidCatch(error,info){\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n    render(){\r\n        if(this.state.error){\r\n            return <h1>Oops, something went wrong!</h1>\r\n        }else {\r\n            return (\r\n                this.props.children\r\n            )\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default ErrorBoundry;","import React from \"react\";\r\nimport SearchBox from \"../components/SearchBox.jsx\";\r\nimport CardList from \"../components/CardList.jsx\";\r\nimport Scroll from \"../components/Scroll.jsx\";\r\nimport ErrorBoundry from \"../components/ErrorBoundry.jsx\";\r\nimport \"./App.css\";\r\n\r\nimport {connect} from \"react-redux\";\r\nimport {setSearchField, requestRobots} from \"../actions.js\";\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        searchField : state.searchRobots.searchField,\r\n        isPending: state.requestRobots.isPending,\r\n        robots: state.requestRobots.robots,\r\n        error: state.requestRobots.error,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRobotsRequest: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nclass App extends React.Component{\r\n\r\ncomponentDidMount(){\r\n this.props.onRobotsRequest();\r\n}\r\n\r\nrender(){\r\n    const {searchField, isPending, robots, onSearchChange} = this.props;\r\n    const matchingRobots = robots.filter(robot => {\r\n        return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    });\r\n    return isPending ?\r\n    <h1>Loading...</h1> :\r\n    (\r\n        <div className=\"tc\">\r\n            <h1 className=\"f1\">Robofriends</h1>\r\n            <SearchBox barChange = {onSearchChange} />\r\n            <br />\r\n            <Scroll>\r\n                <ErrorBoundry>\r\n                    <CardList robots = {matchingRobots} />\r\n                </ErrorBoundry>\r\n            </Scroll>\r\n        </div>\r\n\r\n    )\r\n}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from \"./constants.js\";\r\n\r\nexport const setSearchField = (text) => {\r\n    return {\r\n        type: CHANGE_SEARCH_FIELD,\r\n        payload: text\r\n    }\r\n}\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n        .then(response => response.json())\r\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\r\n}","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\r\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\r\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\r\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from \"./constants.js\";\r\n\r\nconst intialStateSearch = {\r\n    searchField: \"\"\r\n}\r\n\r\nexport const searchRobots = (state = intialStateSearch, action = {}) => {\r\n    switch (action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, { searchField: action.payload });\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst intialStateRobots = {\r\n    isPending: \"\",\r\n    robots: [],\r\n    error: \"\"\r\n}\r\n\r\nexport const requestRobots = (state = intialStateRobots, action = {}) => {\r\n    switch (action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true });\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { isPending: false, robots: action.payload });\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { isPending: false, error: action.payload });\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport { createLogger} from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport \"tachyons\";\nimport App from \"./containers/App.jsx\";\nimport {searchRobots, requestRobots} from \"./reducers.js\";\n\nconst rootReducer = combineReducers({searchRobots, requestRobots});\nconst logger = createLogger();\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render( < Provider store = { store } > < App /> </Provider> , document.getElementById('root'));\n\n        // If you want your app to work offline and load faster, you can change\n        // unregister() to register() below. Note this comes with some pitfalls.\n        // Learn more about service workers: https://bit.ly/CRA-PWA\n        serviceWorker.register();"],"sourceRoot":""}