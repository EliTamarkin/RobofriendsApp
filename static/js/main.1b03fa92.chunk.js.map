{"version":3,"sources":["serviceWorker.js","components/SearchBox.jsx","components/Card.jsx","components/CardList.jsx","components/Scroll.jsx","components/ErrorBoundry.jsx","containers/App.jsx","index.js"],"names":["Boolean","window","location","hostname","match","SearchBox","props","type","name","placeholder","onChange","barChange","className","Card","src","id","alt","email","CardList","cardsArray","robots","map","robot","index","key","Scroll","style","overflowY","border","height","children","ErrorBoundry","state","error","info","this","setState","React","Component","App","onSearchBarChange","event","searchfield","target","value","fetch","then","response","json","users","matchingRobots","filter","toLowerCase","includes","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6CCNSC,EATG,SAACC,GACnB,OACI,6BACI,2BAAOC,KAAK,OAAOC,KAAK,cAAcC,YAAY,gBAAgBC,SAAYJ,EAAMK,UAAWC,UAAU,uCCWlGC,EAbF,SAACP,GACV,OACI,yBAAKM,UAAU,oDACX,yBAAKE,IAAG,+BAA0BR,EAAMS,GAAhC,YAA8CC,IAAI,WAC1D,6BACI,4BAAKV,EAAME,MACX,2BAAIF,EAAMW,UCOXC,EAbE,SAAC,GAAc,IACtBC,EADqB,EAAZC,OACYC,KAAI,SAACC,EAAMC,GAClC,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAOR,GAAIO,EAAMP,GAAIP,KAAMc,EAAMd,KAAMS,MAASK,EAAML,WAE5E,OACI,6BACKE,ICGEM,EAVA,SAACnB,GACZ,OACI,yBAAKoB,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAChEvB,EAAMwB,WCsBJC,E,YAxBX,aAAc,IAAD,8BACT,+CACKC,MAAQ,CACTC,OAAO,GAHF,E,+EAMKA,EAAMC,GACpBC,KAAKC,SAAS,CACVH,OAAO,M,+BAIX,OAAGE,KAAKH,MAAMC,MACH,2DAGHE,KAAK7B,MAAMwB,a,GAjBAO,IAAMC,WCiDlBC,G,kBA5Cf,aAAc,IAAD,8BACT,+CAaHC,kBAAoB,SAACC,GAClB,EAAKL,SAAS,CACVM,YAAcD,EAAME,OAAOC,SAd/B,EAAKZ,MAAO,CACRZ,OAAQ,GACRsB,YAAa,IAJR,E,iFAOO,IAAD,OACfG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKb,SAAS,CACzBhB,OAAQ6B,S,+BAQP,IAAD,OACEC,EAAiBf,KAAKH,MAAMZ,OAAO+B,QAAO,SAAA7B,GAC5C,OAAOA,EAAMd,KAAK4C,cAAcC,SAAS,EAAKrB,MAAMU,YAAYU,kBAEpE,OACI,yBAAKxC,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWD,UAAawB,KAAKK,oBAC7B,6BACA,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUpB,OAAU8B,W,GA/BtBb,IAAMC,YCAxBgB,IAASC,OAAQ,kBAAE,EAAF,MAEXC,SAASC,eAAe,SPwHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMd,MAAK,SAAAe,GACjCA,EAAaC,iB","file":"static/js/main.1b03fa92.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\n\r\n\r\nconst SearchBox = (props) => {\r\nreturn (\r\n    <div>\r\n        <input type=\"text\" name=\"searchfield\" placeholder=\"search robots\" onChange = {props.barChange} className=\"pa3 ba b--green bg-lightest-blue\" />\r\n    </div>\r\n)\r\n};\r\n\r\n\r\nexport default SearchBox;","import React from \"react\";\r\n\r\n\r\n\r\nconst Card = (props) => {\r\n    return (\r\n        <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img src={`https://robohash.org/${props.id}?200x200`} alt=\"robots\"></img>\r\n            <div>\r\n                <h2>{props.name}</h2>\r\n                <p>{props.email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Card;","import React from \"react\";\r\nimport Card from './Card.jsx';\r\n\r\n\r\nconst CardList = ({robots}) => {\r\n    const cardsArray  = robots.map((robot,index) => {\r\n        return <Card key={index} id={robot.id} name={robot.name} email = {robot.email}  />\r\n    })\r\n    return (\r\n        <div>\r\n            {cardsArray}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default CardList;","import React from \"react\";\r\n\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: \"scroll\", border: \"3px solid black\", height: \"800px\"}}>\r\n            {props.children}\r\n        </div>\r\n\r\n    )\r\n};\r\n\r\n\r\nexport default Scroll;","import React from \"react\";\r\n\r\n\r\nclass ErrorBoundry extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            error: false\r\n        }\r\n    }\r\n    componentDidCatch(error,info){\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n    render(){\r\n        if(this.state.error){\r\n            return <h1>Oops, something went wrong!</h1>\r\n        }else {\r\n            return (\r\n                this.props.children\r\n            )\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default ErrorBoundry;","import React from \"react\";\r\nimport SearchBox from \"../components/SearchBox.jsx\";\r\nimport CardList from \"../components/CardList.jsx\";\r\nimport Scroll from \"../components/Scroll.jsx\";\r\nimport ErrorBoundry from \"../components/ErrorBoundry.jsx\";\r\nimport \"./App.css\";\r\n\r\nclass App extends React.Component{\r\nconstructor(){\r\n    super();\r\n    this.state ={\r\n        robots: [],\r\n        searchfield: \"\"\r\n    }\r\n}\r\ncomponentDidMount(){\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n    .then(response => response.json())\r\n    .then(users => this.setState({\r\n        robots: users\r\n    }))\r\n}\r\n onSearchBarChange = (event) => {\r\n    this.setState({\r\n        searchfield : event.target.value\r\n    })\r\n}\r\nrender(){\r\n    const matchingRobots = this.state.robots.filter(robot => {\r\n        return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n    });\r\n    return (\r\n        <div className=\"tc\">\r\n            <h1 className=\"f1\">Robofriends</h1>\r\n            <SearchBox barChange = {this.onSearchBarChange} />\r\n            <br />\r\n            <Scroll>\r\n                <ErrorBoundry>\r\n                    <CardList robots = {matchingRobots} />\r\n                </ErrorBoundry>\r\n            </Scroll>\r\n        </div>\r\n\r\n    )\r\n}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport \"tachyons\";\nimport App from \"./containers/App.jsx\"\n\nReactDOM.render( < App /\n    >\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}